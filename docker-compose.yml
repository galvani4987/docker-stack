# version: '3.8'

networks:
  app-network:
    driver: bridge

services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  caddy:
    image: caddy:alpine
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config:/etc/caddy # Mounts the whole config directory
      - caddy_data:/data
      - caddy_config:/config
    env_file: # Add env_file to load .env variables
      - .env
    networks:
      - app-network
    restart: unless-stopped

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DB_TYPE=${N8N_DB_TYPE}
      - DB_POSTGRESDB_HOST=${N8N_DB_POSTGRESDB_HOST}
      - DB_POSTGRESDB_PORT=${N8N_DB_POSTGRESDB_PORT}
      - DB_POSTGRESDB_USER=${N8N_DB_POSTGRESDB_USER}
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_POSTGRESDB_PASSWORD}
      - DB_POSTGRESDB_DATABASE=${N8N_DB_POSTGRESDB_DATABASE}
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=${N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS}
      - N8N_RUNNERS_ENABLED=${N8N_RUNNERS_ENABLED}
      - N8N_HOST=n8n
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE:-America/Sao_Paulo} # Default if not in .env
      - TZ=${TZ:-America/Sao_Paulo} # Default if not in .env
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_started

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --save 60 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    env_file:
      - .env # To ensure REDIS_PASSWORD from .env is available
    volumes:
      - redis_data:/data
    networks:
      - app-network

  authelia:
    image: authelia/authelia:latest
    container_name: authelia
    restart: unless-stopped
    env_file:
      - .env # For all AUTHELIA_ variables
    volumes:
      - ./config/authelia:/config
      # Optional: Mount for /var/log/authelia if not using default stdout/stderr logging
      # - authelia_logs:/var/log/authelia
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_started # Wait for Redis to be ready
      postgres: # For notifications/audit log as per docs/setup_authelia.md
        condition: service_started
    # healthcheck: # Optional, but good for production
    #   test: ["CMD", "authelia", "healthcheck"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 30s

volumes:
  postgres_data:
  caddy_data:
  caddy_config:
  n8n_data:
  redis_data:
