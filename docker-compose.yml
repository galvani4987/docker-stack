# version: '3.8'

networks:
  app-network:
    driver: bridge

services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  caddy:
    image: caddy:alpine
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config:/etc/caddy # Mounts the whole config directory
      - caddy_data:/data
      - caddy_config:/config
    env_file: # Add env_file to load .env variables
      - .env
    networks:
      - app-network
    restart: unless-stopped

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DB_TYPE=${N8N_DB_TYPE}
      - DB_POSTGRESDB_HOST=${N8N_DB_POSTGRESDB_HOST}
      - DB_POSTGRESDB_PORT=${N8N_DB_POSTGRESDB_PORT}
      - DB_POSTGRESDB_USER=${N8N_DB_POSTGRESDB_USER}
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_POSTGRESDB_PASSWORD}
      - DB_POSTGRESDB_DATABASE=${N8N_DB_POSTGRESDB_DATABASE}
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=${N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS}
      - N8N_RUNNERS_ENABLED=${N8N_RUNNERS_ENABLED}
      - N8N_HOST=n8n
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE:-America/Sao_Paulo} # Default if not in .env
      - TZ=${TZ:-America/Sao_Paulo} # Default if not in .env
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_started

  waha:
    image: devlikeapro/waha:arm # Using the latest tag as per docs
    container_name: waha
    restart: unless-stopped
    env_file:
      - .env
    # Ports are commented out by default after initial QR scan.
    # For initial setup, uncomment to scan QR code via http://localhost:3000 or http://<server_ip>:3000
    # Make sure your server's firewall allows port 3000 if accessing remotely for setup.
    # ports:
    #   - "127.0.0.1:3000:3000" # Expose only on host for security during setup
    volumes:
      - ./config/waha/sessions:/app/.sessions # Persistent sessions
      - ./config/waha/media:/app/.media       # Persistent media files
    networks:
      - app-network
    logging: # Recommended logging configuration from WAHA docs
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  authentik-postgres:
    image: docker.io/library/postgres:15-alpine
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${AUTHENTIK_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTHENTIK_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AUTHENTIK_POSTGRES_DB}
    volumes:
      - authentik_db:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTHENTIK_POSTGRES_USER} -d ${AUTHENTIK_POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  authentik-redis:
    image: docker.io/library/redis:alpine
    restart: unless-stopped
    volumes:
      - authentik_redis:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  authentik-server:
    image: ghcr.io/goauthentik/server:latest
    restart: unless-stopped
    env_file: .env
    environment:
      AUTHENTIK_POSTGRESQL__HOST: authentik-postgres
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_POSTGRES_PASSWORD}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_POSTGRES_DB}
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "true"
      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL_HOST}
      AUTHENTIK_EMAIL__PORT: ${AUTHENTIK_EMAIL_PORT}
      AUTHENTIK_EMAIL__USERNAME: ${AUTHENTIK_EMAIL_USERNAME}
      AUTHENTIK_EMAIL__PASSWORD: ${AUTHENTIK_EMAIL_PASSWORD}
      AUTHENTIK_EMAIL__USE_TLS: ${AUTHENTIK_EMAIL_USE_TLS}
      AUTHENTIK_EMAIL__USE_SSL: ${AUTHENTIK_EMAIL_USE_SSL}
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL_FROM}
      AUTHENTIK_LISTEN__HTTP: 0.0.0.0:9000
      AUTHENTIK_LISTEN__HTTPS: 0.0.0.0:9443
      AUTHENTIK_LISTEN__METRICS: 0.0.0.0:9300
      AUTHENTIK_LISTEN__DEBUG: 0.0.0.0:9900
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
      - authentik_certs:/certs
    networks:
      - app-network
    depends_on:
      authentik-postgres:
        condition: service_healthy
      authentik-redis:
        condition: service_healthy

  authentik-worker:
    image: ghcr.io/goauthentik/server:latest
    restart: unless-stopped
    command: worker
    env_file: .env
    environment:
      AUTHENTIK_POSTGRESQL__HOST: authentik-postgres
      AUTHENTIK_POSTGRESQL__USER: ${AUTHENTIK_POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${AUTHENTIK_POSTGRES_PASSWORD}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTHENTIK_POSTGRES_DB}
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "true"
      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL_HOST}
      AUTHENTIK_EMAIL__PORT: ${AUTHENTIK_EMAIL_PORT}
      AUTHENTIK_EMAIL__USERNAME: ${AUTHENTIK_EMAIL_USERNAME}
      AUTHENTIK_EMAIL__PASSWORD: ${AUTHENTIK_EMAIL_PASSWORD}
      AUTHENTIK_EMAIL__USE_TLS: ${AUTHENTIK_EMAIL_USE_TLS}
      AUTHENTIK_EMAIL__USE_SSL: ${AUTHENTIK_EMAIL_USE_SSL}
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL_FROM}
      # Worker does not need listen ports
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
      - authentik_certs:/certs
    networks:
      - app-network
    depends_on:
      authentik-postgres:
        condition: service_healthy
      authentik-redis:
        condition: service_healthy

  authentik_proxy_n8n:
    image: ghcr.io/goauthentik/proxy:latest
    restart: unless-stopped
    env_file: .env
    environment:
      AUTHENTIK_HOST: https://auth.{$DOMAIN_NAME}
      AUTHENTIK_TOKEN: ${AUTHENTIK_TOKEN_N8N}
      AUTHENTIK_INSECURE: "false"
      AUTHENTIK_LOG_LEVEL: info
    networks:
      - app-network
    depends_on:
      - authentik-server

  authentik_proxy_cockpit:
    image: ghcr.io/goauthentik/proxy:latest
    restart: unless-stopped
    env_file: .env
    environment:
      AUTHENTIK_HOST: https://auth.{$DOMAIN_NAME}
      AUTHENTIK_TOKEN: ${AUTHENTIK_TOKEN_COCKPIT}
      AUTHENTIK_INSECURE: "false"
      AUTHENTIK_LOG_LEVEL: info
    networks:
      - app-network
    depends_on:
      - authentik-server

  authentik_proxy_waha:
    image: ghcr.io/goauthentik/proxy:latest
    restart: unless-stopped
    env_file: .env
    environment:
      AUTHENTIK_HOST: https://auth.{$DOMAIN_NAME}
      AUTHENTIK_TOKEN: ${AUTHENTIK_TOKEN_WAHA}
      AUTHENTIK_INSECURE: "false"
      AUTHENTIK_LOG_LEVEL: info
    networks:
      - app-network
    depends_on:
      - authentik-server

volumes:
  postgres_data:
  caddy_data:
  caddy_config:
  n8n_data:
  authentik_db:
  authentik_redis:
  authentik_certs:
